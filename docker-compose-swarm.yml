version: '3.5'

services:

  cam:
    image: zeroprg/flask-docker-swarm_cam:latest
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
    ports:
      - 3020:3020
    environment:
      - CLASSIFIER_SERVER=http://192.168.1.101:4000/classify
      - PORT=3020
      - FLASK_ENV=production
      - APP_SETTINGS=/home/app/web/config.txt
      - DB_IP_ADDRESS=192.168.1.100
      - DB_USERNAME=odroid
      - DB_PASSWORD=vist2508
      - DB_NAME=streamer
    depends_on:
      - db
      - web
    networks:
      - flask


  web:
    image: zeroprg/flask-docker-swarm_web:latest
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
#      placement:
#        constraints: [node.role == worker]
    ports:
      - 4000:4000
    environment:
      - FLASK_ENV=production
      - APP_SETTINGS=/home/app/web/config.txt
      - DB_USERNAME=odroid
      - DB_IP_ADDRESS=192.168.1.100
      - DB_PASSWORD=vist2508
      - DB_NAME=streamer
    depends_on:
      - db
    networks:
      - flask
    healthcheck:
      test: curl --fail http://localhost:4000/ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

#  db:
#    hostname: 'primary'
#    container_name: pg_container
#    image: arm32v7/postgres
#    restart: always
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#      placement:
#        constraints:
#          - node.role == manager
#    volumes:
#       - data-volume:./
#       - ./services/db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
#    ports:
#      - 5432:5432

#    environment:
#       - PGHOST=/tmp
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#       - POSTGRES_DB=streamer
#       - PGDATA=./
#       - MAX_CONNECTIONS=60
#       - MAX_WAL_SENDERS=5
#       - PG_MODE=primary
    networks:
      - flask

#  db_replica:
#    image: arm32v7/postgres
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#      placement:
#        constraints:
#          - node.role == worker
#         # - node.labels.type != primary
#    volumes:
#       - pg-replica-vol:./
#    ports:
#      - "5432"
#    environment:
#      - PGHOST=/tmp
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#      - POSTGRES_DB=streamer
#      - PGDATA=./
#      - MAX_CONNECTIONS=60
#      - MAX_WAL_SENDERS=5
#      - PG_MODE=replica
#      - PG_PRIMARY_HOST=primary
#      - PG_PRIMARY_PORT=5432
#    depends_on:
#      - db
#    networks:
#      - flask


  ui:
    image: zeroprg/flask-ai-classifier-docker-swarm_ui:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
#      placement:
#        constraints:
#         - node.role == worker
    ports:
      - 5000:5000
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - cam
    networks:
      - flask



#  nginx:
#    image: zeroprg/flask-docker-swarm_nginx:latest
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#      placement:
#        constraints:
#          - node.role == manager
#    ports:
#      - 80:80
#    depends_on:
#      - cam
#      - web
#    networks:
#      - flask


  visualizer:
    image: alexellis2/visualizer-arm
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
    ports:
      - 8080:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - flask


networks:
  flask:
    driver: overlay
    external: true

volumes:
#  pg-primary-vol:
  pg-replica-vol:
  data-volume:
    driver: local
