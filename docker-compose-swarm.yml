version: '3.8'

services:

  cam_stream:
    image: zeroprg/flask-docker-swarm_cam:latest 
#    command: python video_streams.py   
    deploy:
      replicas: 5
#      max_replicas_per_node: 2 # doesn't work
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role==worker
    environment:
      - CLASSIFIER_SERVER=http://192.168.0.100:4000/classify
      - CONFIDENCE=0.419967
      - FLASK_ENV=production
      - APP_SETTINGS=/home/app/config.txt
      - DB_IP_ADDRESS=192.168.0.167
      - DB_USERNAME=odroid
      - DB_PASSWORD=passw0rd
      - DB_NAME=streamer     
      - MAXIMUM_VIDEO_STREAMS=10 #maximum streams processed per node
      - CLASSIFIER_TYPE=LOCAL
      - KAFKA_SERVER=192.168.0.128:9092
    networks:
      - flask


  cam_web:
    image: zeroprg/flask-docker-swarm_cam:latest
    command: gunicorn --env TMPDIR=./ -w 4 -b 0.0.0.0:3020 manage:app
    deploy:
      replicas: 1
#      max_replicas_per_node: 2 # doesn't work
      restart_policy:
        condition: on-failure
#      placement:
#        constraints:
#          - node.role==worker
    environment:
      - FLASK_ENV=production
      - APP_SETTINGS=/home/app/config.txt
      - DB_IP_ADDRESS=192.168.0.167
      - DB_USERNAME=odroid
      - DB_PASSWORD=passw0rd
      - DB_NAME=streamer
    networks:
      - flask
    ports:
      - 3020:3020

  crawler:
    image: zeroprg/flask-docker-swarm_crawler:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role==worker

  #web:
  #  image: zeroprg/flask-docker-swarm_web:latest
  #  deploy:
  #    replicas: 2
  #    restart_policy:
  #      condition: on-failure
  #    placement:
  #      constraints: [node.role == worker]
  #  ports:
  #    - 4000:4000
  #  environment:
  #    - FLASK_ENV=production
  #    - APP_SETTINGS=/home/app/config.txt
  #    - DB_USERNAME=odroid
  #    - DB_IP_ADDRESS=192.168.0.77
  #    - DB_PASSWORD=12345
  #    - DB_NAME=streamer
  #  networks:
  #    - flask
  #  healthcheck:
  #    test: curl --fail http://localhost:4000/ping || exit 1
  #    interval: 10s
  #    timeout: 5s
  #    retries: 5

  #db:
  #  hostname: 'primary'
  #  container_name: pg_container
  #  image: arm32v7/postgres
  #  restart: always
  #  deploy:
  #    replicas: 1
  #    restart_policy:
  #      condition: on-failure
  #    placement:
  #      constraints:
  #        - node.role == worker
  #  volumes:
  #     - data-volume:./
  #     - ./services/db/create.sql:/docker-entrypoint-initdb.d/create_tables.sql
  #  ports:
  #    - 5432:5432

  #  environment:
  #     - PGHOST=/tmp
  #     - POSTGRES_USER=streamer
  #     - POSTGRES_PASSWORD=12345
  #     - POSTGRES_DB=streamer
  #     - PGDATA=./
  #     - MAX_CONNECTIONS=100
  #     - MAX_WAL_SENDERS=5
  #     - PG_MODE=primary
  #  networks:
  #    - flask

#  db_replica:
#    image: arm32v7/postgres
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#      placement:
#        constraints:
#          - node.role == worker
#         # - node.labels.type != primary
#    volumes:
#       - pg-replica-vol:./
#    ports:
#      - "5432"
#    environment:
#      - PGHOST=/tmp
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#      - POSTGRES_DB=streamer
#      - PGDATA=./
#      - MAX_CONNECTIONS=60
#      - MAX_WAL_SENDERS=5
#      - PG_MODE=replica
#      - PG_PRIMARY_HOST=primary
#      - PG_PRIMARY_PORT=5432
#    depends_on:
#      - db
#    networks:
#      - flask

  ui:
    image: zeroprg/flask-docker-swarm_ui:latest
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      placement:
        constraints:
         - node.role == worker
    ports:
      - 80:80
    environment:
      - CHOKIDAR_USEPOLLING=true
      - STREAM_SERVER_IP=192.168.0.100:3020
    depends_on:
      - cam
    networks:
      - flask


#  aicams:
#    image: zeroprg/flask-docker-swarm_aicams:latest
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#      placement:
#        constraints:
#         - node.hostname == rock64_1
#    ports:
#      - 81:81
#    environment:
#      - CHOKIDAR_USEPOLLING=true
#    depends_on:
#      - cam
#    networks:
#      - flask


#  visualizer:
#    image: alexellis2/visualizer-arm
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#      placement:
#        constraints:
#         - node.hostname == rock64_1
#    ports:
#      - 8080:8080
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock"
#    networks:
#      - flask


networks:
  flask:
    driver: overlay
    external: false

volumes:
#  pg-primary-vol:
  pg-replica-vol:
  data-volume:
    driver: local
