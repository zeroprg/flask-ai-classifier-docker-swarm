version: '3.5'

services:


#  cam:
#    image: zeroprg/flask-docker-swarm_cam:latest
#    command: gunicorn --bind 0.0.0.0:3020 manage:app
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#      placement:
#        constraints: [node.role == manager]
#    ports:
#      - 3020:3020
#    environment:
#      - FLASK_ENV=production
#      - APP_SETTINGS=/home/app/web/config.txt
#      - DB_USER=postgres
#      - DB_PASSWORD=postgres
#    secrets:
#      - secret_code
#    depends_on:
#      - db
#      - web
#    networks:
#      - app


  web:
    image: zeroprg/flask-docker-swarm_web:latest
    command: gunicorn --bind 0.0.0.0:4000 manage:app
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure
#      placement:
#        constraints: [node.role == worker]
    ports:
      - 4000:4000
    environment:
      - FLASK_ENV=production
      - APP_SETTINGS=/home/app/web/config.txt
      - DB_IP_ADDRESS=192.168.0.167
      - DB_USER_NAME=postgres
      - DB_PASSWORD=postgres
#    secrets:
#      - secret_code
#    depends_on:
#      - db
    networks:
      - app
    healthcheck:
      test: curl --fail http://localhost:4000/ping || exit 1
      interval: 10s
      timeout: 2s
      retries: 5

 # db:
 #   image: zeroprg/flask-docker-swarm_db:latest
 #   deploy:
 #     replicas: 1
 #     restart_policy:
 #       condition: on-failure
 #     placement:
 #       constraints: [node.role == manager]
 #   volumes:
 #     - data-volume:/var/lib/postgresql/data
 #   ports:
 #     - 5432:5432
 #   environment:
 #     - POSTGRES_USER=postgres
 #     - POSTGRES_PASSWORD=postgres
 #   networks:
 #     - app

  nginx:
    image: zeroprg/flask-docker-swarm_nginx:latest
#    deploy:
#           mode: global
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    ports:
      - 80:80
    depends_on:
      - web
    networks:
      - app


  visualizer:
    image: alexellis2/visualizer-arm:latest
    ports:
      - 8080:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - app

networks:
  app:
    driver: overlay
#    ipam:
#       driver: default
#       config:
#           - subnet: 192.168.0.0/16 
volumes:
  data-volume:
    driver: local

#secrets:
#  secret_code:
#    external: true
